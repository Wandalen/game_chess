syntax = "proto3";

import "google/protobuf/empty.proto";

package chess;

service Chess
{
  rpc push_game_create (CreateGame) returns (GameId);
  rpc push_game_accept (AcceptGame) returns (GameId);
  rpc push_move (GameMove) returns (GameId);
  rpc pull_board_state (GameId) returns (Board);
  rpc pull_game_state (GameId) returns (GameState);
  rpc pull_games_list (google.protobuf.Empty) returns (Games);
  rpc push_game_gg (GamePlayer) returns (google.protobuf.Empty);
  rpc push_mgs (Msg) returns (google.protobuf.Empty);
  rpc pull_game_updates (GameId) returns (stream GameUpdate);
}

message GameUpdate
{
  oneof game_update
  {
    GameMove game_move = 1;
    GameEnd game_end = 2;
    // TODO: refactor chat messages to use streams when they are ready.
  }
}

message Blank
{
}

message GamePlayer
{
  string player_id = 1;
  string game_id = 2;
}

message GameInfo
{
  string game_id = 1;
  repeated GamePlayer players = 2;
}

message GameState
{
  string game_id = 1;
  repeated GamePlayer players = 2;
  string game_status = 3;
}

message Board
{
  string game_id = 1;
  Blank board_state = 2;
}

message MultiplayerGame {
  string game_id = 1;
  repeated GamePlayer players = 2;
  int32 status = 3;
}

message Games
{
  repeated MultiplayerGame games = 1;
}

message GameMove
{
  string game_id = 1;
  string player_id = 2;
  Blank move = 3;
}

message GameEnd
{
  // Can be empty if it's a draw.
  string winner_id = 1;
  // Draw, Player won, Surrender.
  string reason = 2;
}

message AcceptGame
{
  string game_id = 1;
  GamePlayer player_id = 2;
}

message CreateGame
{
  GamePlayer player = 1;
}

message GameId
{
  string game_id = 1;
}

message Msg
{
  GamePlayer player = 1;
  string text = 2;
}

message Msgs
{
  repeated Msg messages = 1;
}
